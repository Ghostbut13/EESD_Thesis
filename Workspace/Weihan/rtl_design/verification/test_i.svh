//Autogenerated using ../scripts/runTest.sh.
class test_i extends llc_test;
  `uvm_component_utils(test_i)
  l1_seq seq[1:0][NUM_SIM_CORES-1:0];
  fence_class fence_obj;

  function new(string name, uvm_component parent);
    super.new(name, parent);
    fence_obj = new();
  endfunction : new

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    uvm_config_db #(fence_class)::set(this, "*", "fence_obj", fence_obj);
    //SequenceInstantiationStart
    for(int i=0;i<NUM_SIM_CORES;i++) begin
      `ifdef SEQ1
        seq[0][i]  = l1_seq1::type_id::create($psprintf("l1_seq1_%0d",i),this);
      `elsif SEQ2
        seq[0][i]  = l1_seq2::type_id::create($psprintf("l1_seq2_%0d",i),this);
      `elsif SEQ3
        seq[0][i]  = l1_seq3::type_id::create($psprintf("l1_seq3_%0d",i),this);
      `elsif SEQ3_2
        seq[0][i]  = l1_seq3::type_id::create($psprintf("l1_seq3-0_%0d",i),this);
        seq[1][i]  = l1_seq3::type_id::create($psprintf("l1_seq3-1_%0d",i),this);
      `elsif SEQ4
        seq[0][i]  = l1_seq4::type_id::create($psprintf("l1_seq4_%0d",i),this);
      `elsif SEQ5
        seq[0][i]  = l1_seq5::type_id::create($psprintf("l1_seq5_%0d",i),this);
      `elsif SEQ6
        seq[0][i]  = l1_seq6::type_id::create($psprintf("l1_seq6_%0d",i),this);
      `elsif SEQ7
        seq[0][i]  = l1_seq7::type_id::create($psprintf("l1_seq7_%0d",i),this);
      `elsif SEQ8
        seq[0][i]  = l1_seq8::type_id::create($psprintf("l1_seq8_%0d",i),this);
      `elsif SEQ9
        seq[0][i]  = l1_seq9::type_id::create($psprintf("l1_seq9_%0d",i),this);
      `elsif SEQ10
        seq[0][i]  = l1_seq10::type_id::create($psprintf("l1_seq10_%0d",i),this);
      `else 
        $fatal("Error: No sequence name (SEQi) defined"); 
      `endif 

    //SequenceInstantiationEnd
    end
  endfunction : build_phase

  function void end_of_elaboration_phase(uvm_phase phase);
    super.end_of_elaboration_phase(phase);
  endfunction : end_of_elaboration_phase

  virtual task run_phase(uvm_phase phase);
    super.run_phase(phase);
    phase.raise_objection(this);
    //SequenceRunStart
    for(int i=0;i<NUM_SIM_CORES;i++) begin
      automatic int j = i;
      fork
      seq[0][j].start(t_env.seqr[j]);
      `ifdef SEQ3_2
        seq[1][j].start(t_env.seqr[j]);
      `endif 
      //SequenceLoopEnd
      join_none
    end
    wait fork;
    //SequenceRunEnd
    phase.drop_objection(this);
 endtask

endclass : test_i

